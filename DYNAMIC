------------------------FIBONACCI IN C -------------------------------------
#include <stdio.h>

// Function to calculate Fibonacci using memoization
int fibonacci(int n, int dp[]) {
    if (n <= 1) {
        return n;
    }
    // Check if already calculated
    if (dp[n] != -1) {
        return dp[n];
    }
    // Store the result in dp array
    dp[n] = fibonacci(n - 1, dp) + fibonacci(n - 2, dp);
    return dp[n];
}

int main() {
    int n, i;
    
    printf("Enter the number of terms: ");
    scanf("%d", &n);
    
    // Array to store computed Fibonacci numbers
    int dp[n + 1];

    // Initialize with -1 (indicating not calculated yet)
    for (i = 0; i <= n; i++) {
        dp[i] = -1;
    }

    printf("Fibonacci Series: ");
    for (i = 0; i < n; i++) {
        printf("%d ", fibonacci(i, dp));
    }

    printf("\n");
    return 0;
}
-------------------------LCS--------------------
#include <stdio.h>
#include <string.h>

// Function to find the length of the Longest Common Subsequence (LCS)
int findLCS(char text1[], char text2[]) {
    int m = strlen(text1);
    int n = strlen(text2);
    int dp[m + 1][n + 1]; // DP table

    // Filling the DP table
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0 || j == 0) {
                dp[i][j] = 0; // Base case
            } else if (text1[i - 1] == text2[j - 1]) {
                dp[i][j] = 1 + dp[i - 1][j - 1]; // Characters match
            } else {
                dp[i][j] = (dp[i - 1][j] > dp[i][j - 1]) ? dp[i - 1][j] : dp[i][j - 1]; // Take max
            }
        }
    }

    return dp[m][n]; // LCS length
}

int main() {
    char text1[] = "abaaba";
    char text2[] = "babbab";
    
    int lcsLength = findLCS(text1, text2);
    printf("The length of the Longest Common Subsequence is: %d\n", lcsLength);

    return 0;
}
------------------------------------------------------
#include <stdio.h>

int memo[100]; // Array to store computed Fibonacci values

int fib(int n) {
    if (n <= 1) return n; 
    if (memo[n] != -1) return memo[n]; // Return cached result
    return memo[n] = fib(n - 1) + fib(n - 2);
}

int main() {
    int n = 10;
    for (int i = 0; i <= n; i++) memo[i] = -1; // Initialize memoization array
    printf("%d\n", fib(n)); // Output: 55
    return 0;
}
------------------------------------------
#include <stdio.h>

int fib(int n) {
    if (n <= 1) return n;
    
    int dp[100]; // Array to store Fibonacci values
    dp[0] = 0;
    dp[1] = 1;

    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }

    return dp[n];
}

int main() {
    int n = 10;
    printf("%d\n", fib(n)); // Output: 55
    return 0;
}


